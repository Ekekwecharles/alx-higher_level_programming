================================================
Test cases for the ``7-base_geometry.py`` module
================================================

This module defines a class with a function that validated the value parameter passed to it
def integer_validator(self, name, value)


::
Calling the area method
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

::
Passing an int
>>> bg.integer_validator("name", 10)

::
Passing a string as value
>>> bg.integer_validator("name", "ten")
Traceback (most recent call last):
...
TypeError: name must be an integer

::
Passing 0 as value
>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

::
Passing value less than 0
>>> bg.integer_validator("name", -1)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

::
Passing extra arg for area()
>>> bg.area(1)
Traceback (most recent call last):
...
TypeError: area() takes 1 positional argument but 2 were given

::
Passing a bool value
>>> bg.integer_validator("name", True)
Traceback (most recent call last):
...
TypeError: name must be an integer

::
Passing a float
>>> bg.integer_validator("name", 1.4)
Traceback (most recent call last):
...
TypeError: name must be an integer

::
Passng an empty value to integer_validator
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::
Passng only one value to integer_validator
>>> bg.integer_validator("name")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

::
Passng more the two value to integer_validator
>>> bg.integer_validator("name", 1, 2)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

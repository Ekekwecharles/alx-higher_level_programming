#!/usr/bin/python3
"""Tests for the base.py module"""
import unittest
from models.base import Base
from models.rectangle import Rectangle
from models.square import Square
import os


class TestBase_instantiation(unittest.TestCase):
    """Testing istantiation of the Base Class"""

    def test_no_arg(self):
        """Caling the class without and id"""
        b1 = Base()
        b2 = Base()
        self.assertEqual(b1.id, b2.id - 1)

    def test_three_bases(self):
        """Testing three Base objects with no args"""
        b1 = Base()
        b2 = Base()
        b3 = Base()
        self.assertEqual(b1.id, b3.id - 2)

    def test_none(self):
        """Testing for None(id is by default None"""
        b1 = Base()
        b2 = Base()
        self.assertEqual(b1.id, b2.id - 1)

    def test_unique_id(self):
        """Test for when id is is explicitly passed"""
        self.assertEqual(15, Base(15).id)

    def test_nb_objects_after_unique_id(self):
        """Test of number of objects after previous object def with
        a unique id"""
        b1 = Base()
        b2 = Base(15)
        b3 = Base()
        self.assertEqual(b1.id, b3.id - 1)

    def test_reassign_of_id(self):
        """Test value of of id after reassiging it another value"""
        b1 = Base(15)
        b1.id = 18
        self.assertEqual(b1.id, 18)

    def test_nb_objects_is_private(self):
        """Test that nb_object class attr is indeed private"""
        with self.assertRaises(AttributeError):
            print(Base(15).__nb_instances)

    def test_str_id(self):
        """Passing string as id"""
        self.assertEqual("hi", Base("hi").id)

    def test_float_id(self):
        """Passing float as id"""
        self.assertEqual(1.2, Base(1.2).id)

    def test_complex_id(self):
        """Passing comlex value as id"""
        self.assertEqual(complex(2), Base(complex(2)).id)

    def test_dict_id(self):
        """Passing a dictionary as id"""
        self.assertEqual({"hi": 1, "hey": 2}, Base({"hi": 1, "hey": 2}).id)

    def test_bool_id(self):
        """Passing bool value as id"""
        self.assertEqual(True, Base(True).id)

    def test_list_id(self):
        """Passing a list as id"""
        self.assertEqual([1, 2, 3, 4], Base([1, 2, 3, 4]).id)

    def test_tuple_id(self):
        """Passing a tuple as id"""
        self.assertEqual((1, 2, 3), Base((1, 2, 3)).id)

    def test_set_id(self):
        """Passing a set as id"""
        self.assertEqual({1, 2, 3, 4}, Base({1, 2, 3, 4}).id)

    def test_frozenset_id(self):
        """Passing comlex value as id"""
        self.assertEqual(frozenset({1, 2, 3, 4}), Base(frozenset({1, 2, 3, 4})).id)

    def test_range_id(self):
        """Passing range object(a sequence) as id"""
        self.assertEqual(range(2), Base(range(2)).id)

    def test_bytes_id(self):
        """Passing bytes value as id"""
        self.assertEqual(b'abc', Base(b'abc').id)

    def test_bytearray_id(self):
        """Passing byte array as id"""
        self.assertEqual(bytearray(b'abc'), Base(bytearray(b'abc')).id)
    
    def test_memoryview_id(self):
        """Tests if two objects refer to the same underlying memory """
        self.assertEqual(memoryview(b'abc'), Base(memoryview(b'abc')).id)

    def test_inf_id(self):
        """Passing infinity value as id"""
        self.assertEqual(float('inf'), Base(float('inf')).id)

    def test_NaN_id(self):
        """Passing NaN value as id"""
        self.assertNotEqual(float('nan'), Base(float('nan')).id)

    def test_two_args(self):
        """Pasing two values to Base"""
        with self.assertRaises(TypeError):
            Base(2, 3)

class TestBase_to_json_string(unittest.TestCase):
    """Test cases for to_json_string static method of the Base class"""

    def test_to_json_string_rectangle_type(self):
        """Testing if the return type is correct"""
        r = Rectangle(1, 2, 3, 4, 5)
        self.assertEqual(str, type(Base.to_json_string([r.to_dictionary()])))

    def test_to_json_string_rectangle_one_dict(self):
        """Passig one dictinary as value"""
        r = Rectangle(1, 2, 3, 4, 5)
        self.assertTrue(len(Base.to_json_string([r.to_dictionary()])) == 52)

    def test_to_json_string_rectangle_two_dicts(self):
        """Passing two dictionaries"""
        r1 = Rectangle(1, 2, 3, 4, 5)
        r2 = Rectangle(5, 4, 3, 2, 1)
        _dicts = [r1.to_dictionry(), r2.to_dictionary()]
        self.assertTrue(len(Base.to_json_string(_dicts)) == 104)


    def test_to_json_string_square_type(self):
        """Testing if the return type is correct"""
        s = Square(1, 2, 3, 4)
        self.assertEqual(str, type(Base.to_json_string([s.to_dictionary()])))

    def test_to_json_string_square_one_dict(self):
        """Passig one dictionary as value"""
        s = Square(1, 2, 3, 4)
        self.assertTrue(len(Base.to_json_string([s.to_dictionary()])) == 38)

    def test_to_json_string_square_two_dicts(self):
        """Passig two dictionaries as value"""
        s1 = Square(1, 2, 3, 4)
        s2 = Square(4, 3, 2, 1)
        _dicts = [s1.to_dictionary(), s2.to_dictionary()]
        self.assertTrue(len(Base.to_json_string(_dicts)) == 76)

    def test_to_json_string_none(self):
        """Testing None value"""
        self.assertEqual("[]", Base.to_json_string(None))

    def test_to_json_string_no_args(self):
        """Passing no value"""
        with self.assertRaises(TypeError):
            Base.to_json_string()

    def test_to_json_string_two_args(self):
        """Passing two args, to_json_sting requires only one arg"""
        with self.assertRaises(TypeError):
            Base.to_json_string([], 1)
